{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Validators } from '@angular/forms';\nlet TaskComponent = class TaskComponent {\n  constructor(taskService, userService, projectService, formBuilder) {\n    this.taskService = taskService;\n    this.userService = userService;\n    this.projectService = projectService;\n    this.formBuilder = formBuilder;\n    this.tasks = [];\n    this.dataSource = new MatTableDataSource([]);\n    this.users = [];\n    this.projects = [];\n    this.displayedColumns = ['id', 'name', 'description', 'date', 'done', 'users', 'projects', 'actions'];\n    this.taskForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      date: ['', Validators.required],\n      assignedUsers: [''],\n      assignedProjects: ['']\n    });\n  }\n  ngOnInit() {\n    this.getTasks();\n    this.getUsers();\n    this.getProjects();\n  }\n  getUsers() {\n    this.users = this.userService.getUsers();\n  }\n  getProjects() {\n    this.projects = this.projectService.getProjects();\n  }\n  getTasks() {\n    this.tasks = this.taskService.getTasks();\n    this.dataSource = new MatTableDataSource(this.tasks);\n  }\n  saveTask() {\n    const task = this.taskForm.value;\n    if (task.id) {\n      // Check if the task has an id, meaning it's an existing task\n      this.taskService.updateTask(task); // Call updateTask from taskService\n    } else {\n      // Update the method call to use addNewTask instead of addTask\n      this.addNewTask(task.name, task.description, task.date, task.assignedUsers, task.assignedProjects);\n    }\n    this.taskForm.reset();\n  }\n  addNewTask(name, description, date, assignedUsers, assignedProjects) {\n    this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n    this.getTasks();\n  }\n  deleteTask(task) {\n    this.taskService.deleteTask(task);\n    this.getTasks();\n  }\n  editTask(task) {\n    this.taskForm.patchValue(task);\n  }\n};\nTaskComponent = __decorate([Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})], TaskComponent);\nexport { TaskComponent };","map":{"version":3,"mappings":"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","names":["Component","MatTableDataSource","Validators","TaskComponent","constructor","taskService","userService","projectService","formBuilder","taskForm","group","name","required","description","date","assignedUsers","assignedProjects","ngOnInit","getTasks","getUsers","getProjects","users","projects","tasks","dataSource","saveTask","task","value","id","updateTask","addNewTask","reset","addTask","deleteTask","editTask","patchValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/denisdalipi/Downloads/angular-project/src/app/task/task.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Task } from \"../model/task\";\nimport { TaskService } from '../task.service';\nimport { UserService } from '../user.service';\nimport { User } from '../model/user';\nimport { Project } from '../model/project';\nimport { ProjectService } from '../project.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent implements OnInit {\n  tasks: Task[] = [];\n  dataSource: MatTableDataSource<Task> = new MatTableDataSource<Task>([]);\n\n\n  users: User[] = [];\n  projects: Project[] = [];\n  displayedColumns: string[] = ['id', 'name', 'description', 'date', 'done', 'users', 'projects', 'actions'];\n  taskForm: FormGroup;\n\n  constructor(private taskService: TaskService, private userService: UserService, private projectService: ProjectService, private formBuilder: FormBuilder ) {\n      this.taskForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      date: ['', Validators.required],\n      assignedUsers: [''],\n      assignedProjects: [''],\n    });\n  }\n\n  ngOnInit() {\n    this.getTasks();\n    this.getUsers();\n    this.getProjects();\n  }\n\n  getUsers(): void {\n    this.users = this.userService.getUsers();\n  }\n\n  getProjects(): void {\n    this.projects = this.projectService.getProjects();\n  }\n\n  getTasks(): void {\n   this.tasks = this.taskService.getTasks();\n   this.dataSource = new MatTableDataSource(this.tasks);\n }\n\n saveTask(): void {\n   const task = this.taskForm.value;\n   if (task.id) { // Check if the task has an id, meaning it's an existing task\n     this.taskService.updateTask(task); // Call updateTask from taskService\n   } else {\n     // Update the method call to use addNewTask instead of addTask\n     this.addNewTask(\n       task.name,\n       task.description,\n       task.date,\n       task.assignedUsers,\n       task.assignedProjects\n     );\n   }\n   this.taskForm.reset();\n }\n\n addNewTask(name: string, description: string, date: Date, assignedUsers: User[], assignedProjects: Project[]): void {\n   this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n   this.getTasks();\n }\n\n  deleteTask(task: Task): void {\n    this.taskService.deleteTask(task);\n    this.getTasks();\n  }\n\n  editTask(task: Task): void {\n    this.taskForm.patchValue(task);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}