{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UserService {\n  constructor() {\n    this.nextId = 1;\n    this.users = [{\n      id: this.nextId++,\n      firstName: 'Denis',\n      lastName: 'Dalipi',\n      username: \"Deda\",\n      email: \"denis.dalipi@unifr.ch\",\n      password: \"1234567890\"\n    }, {\n      id: this.nextId++,\n      firstName: 'Guillaume',\n      lastName: 'Venier',\n      username: \"Guve\",\n      email: \"guillaume.venier@unifr.ch\",\n      password: \"1234567890\"\n    }];\n  }\n  getUsers() {\n    return this.users;\n  }\n  addUser(firstName, lastName, username, email, password) {\n    const user = {\n      id: this.nextId++,\n      firstName,\n      lastName,\n      username,\n      email,\n      password\n    };\n    this.users.push(user);\n  }\n  deleteUser(user) {\n    const index = this.users.findIndex(u => u.id === user.id);\n    if (index >= 0) {\n      this.users.splice(index, 1);\n    }\n  }\n  updateUser(id, firstName, lastName, username, email, password) {\n    const user = this.users.find(u => u.id === id);\n    if (user) {\n      user.firstName = firstName;\n      user.lastName = lastName;\n      user.username = username;\n      user.email = email;\n      user.password = password;\n    }\n  }\n  setName(firstName, lastName) {\n    firstName = firstName;\n    lastName = lastName;\n  }\n  getNextId() {\n    return this.nextId;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)();\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,WAAW;EAHxBC;IAIU,WAAM,GAAG,CAAC;IACjB,UAAK,GAAW,CACf;MAAEC,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,SAAS,EAAE,OAAO;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE,MAAM;MAAEC,KAAK,EAAE,uBAAuB;MAAEC,QAAQ,EAAE;IAAY,CAAE,EACvI;MAAEN,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,SAAS,EAAE,WAAW;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,QAAQ,EAAE,MAAM;MAAEC,KAAK,EAAE,2BAA2B;MAAEC,QAAQ,EAAE;IAAY,CAAE,CAChJ;;EAEDC,QAAQ;IACN,OAAO,IAAI,CAACC,KAAK;EACnB;EAEAC,OAAO,CAACP,SAAiB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IAC5F,MAAMI,IAAI,GAAS;MAAEV,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,SAAS;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAC;IACvF,IAAI,CAACE,KAAK,CAACG,IAAI,CAACD,IAAI,CAAC;EACvB;EAEAE,UAAU,CAACF,IAAU;IACnB,MAAMG,KAAK,GAAG,IAAI,CAACL,KAAK,CAACM,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACf,EAAE,KAAKU,IAAI,CAACV,EAAE,CAAC;IACzD,IAAIa,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACL,KAAK,CAACQ,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;;EAE/B;EAEAI,UAAU,CAACjB,EAAU,EAAEE,SAAiB,EAAEC,QAAgB,EAAEC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IAC7G,MAAMI,IAAI,GAAG,IAAI,CAACF,KAAK,CAACU,IAAI,CAACH,CAAC,IAAIA,CAAC,CAACf,EAAE,KAAKA,EAAE,CAAC;IAC9C,IAAIU,IAAI,EAAE;MACRA,IAAI,CAACR,SAAS,GAAGA,SAAS;MAC1BQ,IAAI,CAACP,QAAQ,GAAGA,QAAQ;MACxBO,IAAI,CAACN,QAAQ,GAAGA,QAAQ;MACxBM,IAAI,CAACL,KAAK,GAAGA,KAAK;MAClBK,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;;EAExB;EAGFa,OAAO,CAACjB,SAAiB,EAAEC,QAAgB;IACzCD,SAAS,GAAGA,SAAS;IACrBC,QAAQ,GAAGA,QAAQ;EACrB;EAEAiB,SAAS;IACL,OAAO,IAAI,CAACnB,MAAM;EACtB;;AA1CWH,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["UserService","constructor","id","nextId","firstName","lastName","username","email","password","getUsers","users","addUser","user","push","deleteUser","index","findIndex","u","splice","updateUser","find","setName","getNextId","factory","providedIn"],"sourceRoot":"","sources":["/Users/denisdalipi/Downloads/angular-project/src/app/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from './model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private nextId = 1;\n   users: User[] = [\n    { id: this.nextId++, firstName: 'Denis', lastName: 'Dalipi', username: \"Deda\", email: \"denis.dalipi@unifr.ch\", password: \"1234567890\" },\n    { id: this.nextId++, firstName: 'Guillaume', lastName: 'Venier', username: \"Guve\", email: \"guillaume.venier@unifr.ch\", password: \"1234567890\" }\n  ];\n\n  getUsers(): User[] {\n    return this.users;\n  }\n\n  addUser(firstName: string, lastName: string, username: string, email: string, password: string): void {\n    const user: User = { id: this.nextId++, firstName, lastName, username, email, password};\n    this.users.push(user);\n  }\n\n  deleteUser(user: User): void {\n    const index = this.users.findIndex(u => u.id === user.id);\n    if (index >= 0) {\n      this.users.splice(index, 1);\n    }\n  }\n\n  updateUser(id: number, firstName: string, lastName: string, username: string, email: string, password: string): void {\n  const user = this.users.find(u => u.id === id);\n  if (user) {\n    user.firstName = firstName;\n    user.lastName = lastName;\n    user.username = username;\n    user.email = email;\n    user.password = password;\n  }\n    }\n\n\n  setName(firstName: string, lastName: string): void {\n    firstName = firstName;\n    lastName = lastName;\n  }\n\n  getNextId(): number {\n      return this.nextId;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}