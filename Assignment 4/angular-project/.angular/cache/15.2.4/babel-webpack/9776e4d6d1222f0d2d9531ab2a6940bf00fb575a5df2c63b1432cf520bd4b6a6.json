{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nlet TaskComponent = class TaskComponent {\n  constructor(taskService, userService, projectService) {\n    this.taskService = taskService;\n    this.userService = userService;\n    this.projectService = projectService;\n    this.tasks = new MatTableDataSource([]);\n    this.users = [];\n    this.projects = [];\n    this.selectedUsers = [];\n    this.displayedColumns = ['id', 'name', 'description', 'date', 'isDone', 'assignedUsers', 'assignedProjects', 'action'];\n  }\n  ngOnInit() {\n    this.getTasks();\n    this.getUsers();\n    this.getProjects();\n  }\n  getTasks() {\n    this.tasks.data = this.taskService.getTasks();\n  }\n  getUsers() {\n    this.users = this.userService.getUsers();\n  }\n  getProjects() {\n    this.projects = this.projectService.getProjects();\n  }\n  addTask(name, description, dateString, assignedUsers, assignedProjects) {\n    name = name.trim();\n    description = description.trim();\n    if (!name || !description || !dateString) {\n      return;\n    }\n    const dateParts = dateString.split('/');\n    const date = new Date(parseInt(dateParts[2]), parseInt(dateParts[1]) - 1, parseInt(dateParts[0]));\n    this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n    this.getTasks();\n  }\n  deleteTask(task) {\n    this.taskService.deleteTask(task);\n    this.getTasks();\n  }\n  editTask(task) {\n    this.editedTask = {\n      ...task\n    };\n    this.selectedUsers = this.editedTask.assignedUsers || [];\n  }\n  cancelEditing() {\n    this.editedTask = undefined;\n    this.selectedUsers = [];\n  }\n  updateTask(task, name, description, date, assignedUsers, assignedProjects) {\n    if (!name || !description || !date) {\n      return;\n    }\n    this.taskService.updateTask(task.id, name, description, date, assignedUsers, assignedProjects);\n    this.editedTask = undefined;\n    this.selectedUsers = [];\n    this.getTasks();\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.tasks.filter = filterValue.trim().toLowerCase();\n  }\n};\nTaskComponent = __decorate([Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})], TaskComponent);\nexport { TaskComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOzC,SAASC,kBAAkB,QAAQ,yBAAyB;AAerD,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAQxBC,YAAoBC,WAAwB,EAAUC,WAAwB,EAAUC,cAA8B;IAAlG,gBAAW,GAAXF,WAAW;IAAuB,gBAAW,GAAXC,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IAPtG,UAAK,GAA6B,IAAIL,kBAAkB,CAAO,EAAE,CAAC;IAElE,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAc,EAAE;IACxB,kBAAa,GAAW,EAAE;IAE1B,qBAAgB,GAAa,CAAC,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,kBAAkB,EAAE,QAAQ,CAAC;EACF;EAEzHM,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAF,QAAQ;IACN,IAAI,CAACG,KAAK,CAACC,IAAI,GAAG,IAAI,CAACR,WAAW,CAACI,QAAQ,EAAE;EAC/C;EAEAC,QAAQ;IACN,IAAI,CAACI,KAAK,GAAG,IAAI,CAACR,WAAW,CAACI,QAAQ,EAAE;EAC1C;EAEAC,WAAW;IACT,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACR,cAAc,CAACI,WAAW,EAAE;EACnD;EAEAK,OAAO,CAACC,IAAY,EAAEC,WAAmB,EAAEC,UAAkB,EAAEC,aAAqB,EAAEC,gBAA2B;IAC/GJ,IAAI,GAAGA,IAAI,CAACK,IAAI,EAAE;IAClBJ,WAAW,GAAGA,WAAW,CAACI,IAAI,EAAE;IAChC,IAAI,CAACL,IAAI,IAAI,CAACC,WAAW,IAAI,CAACC,UAAU,EAAE;MACxC;;IAEF,MAAMI,SAAS,GAAGJ,UAAU,CAACK,KAAK,CAAC,GAAG,CAAC;IACvC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACC,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,EAAEI,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEI,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACjG,IAAI,CAAClB,WAAW,CAACW,OAAO,CAACC,IAAI,EAAEC,WAAW,EAAEO,IAAI,EAAEL,aAAa,EAAEC,gBAAgB,CAAC;IAClF,IAAI,CAACZ,QAAQ,EAAE;EACjB;EAEAmB,UAAU,CAACC,IAAU;IACnB,IAAI,CAACxB,WAAW,CAACuB,UAAU,CAACC,IAAI,CAAC;IACjC,IAAI,CAACpB,QAAQ,EAAE;EACjB;EAEAqB,QAAQ,CAACD,IAAU;IACjB,IAAI,CAACE,UAAU,GAAG;MAAE,GAAGF;IAAI,CAAE;IAC7B,IAAI,CAACG,aAAa,GAAG,IAAI,CAACD,UAAU,CAACX,aAAa,IAAI,EAAE;EAC1D;EAEAa,aAAa;IACX,IAAI,CAACF,UAAU,GAAGG,SAAS;IAC3B,IAAI,CAACF,aAAa,GAAG,EAAE;EACzB;EAEAG,UAAU,CAACN,IAAU,EAAEZ,IAAY,EAAEC,WAAmB,EAAEO,IAAU,EAAEL,aAAsB,EAAEC,gBAA4B;IACxH,IAAI,CAACJ,IAAI,IAAI,CAACC,WAAW,IAAI,CAACO,IAAI,EAAE;MAClC;;IAEF,IAAI,CAACpB,WAAW,CAAC8B,UAAU,CAACN,IAAI,CAACO,EAAE,EAAEnB,IAAI,EAAEC,WAAW,EAAEO,IAAI,EAAEL,aAAa,EAAEC,gBAAgB,CAAC;IAC9F,IAAI,CAACU,UAAU,GAAGG,SAAS;IAC3B,IAAI,CAACF,aAAa,GAAG,EAAE;IACvB,IAAI,CAACvB,QAAQ,EAAE;EACjB;EAEA4B,WAAW,CAACC,KAAY;IACtB,MAAMC,WAAW,GAAID,KAAK,CAACE,MAA2B,CAACC,KAAK;IAC5D,IAAI,CAAC7B,KAAK,CAAC8B,MAAM,GAAGH,WAAW,CAACjB,IAAI,EAAE,CAACqB,WAAW,EAAE;EACtD;CACD;AArEYxC,aAAa,eALzBF,SAAS,CAAC;EACT2C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW3C,aAAa,CAqEzB;SArEYA,aAAa","names":["Component","MatTableDataSource","TaskComponent","constructor","taskService","userService","projectService","ngOnInit","getTasks","getUsers","getProjects","tasks","data","users","projects","addTask","name","description","dateString","assignedUsers","assignedProjects","trim","dateParts","split","date","Date","parseInt","deleteTask","task","editTask","editedTask","selectedUsers","cancelEditing","undefined","updateTask","id","applyFilter","event","filterValue","target","value","filter","toLowerCase","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/denisdalipi/Downloads/angular-project/src/app/task/task.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Task } from \"../model/task\";\nimport { TaskService } from '../task.service';\nimport { UserService } from '../user.service';\nimport { User } from '../model/user';\nimport { Project } from '../model/project';\nimport { ProjectService } from '../project.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent {\n  tasks: MatTableDataSource<Task> = new MatTableDataSource<Task>([]);\n  editedTask?: Task;\n  users: User[] = [];\n  projects: Project[] = [];\n  selectedUsers: User[] = [];\n\n  displayedColumns: string[] = ['id', 'name', 'description', 'date', 'isDone', 'assignedUsers', 'assignedProjects', 'action'];\n  constructor(private taskService: TaskService, private userService: UserService, private projectService: ProjectService) {}\n\n  ngOnInit() {\n    this.getTasks();\n    this.getUsers();\n    this.getProjects();\n  }\n\n  getTasks(): void {\n    this.tasks.data = this.taskService.getTasks();\n  }\n\n  getUsers(): void {\n    this.users = this.userService.getUsers();\n  }\n\n  getProjects(): void {\n    this.projects = this.projectService.getProjects();\n  }\n\n  addTask(name: string, description: string, dateString: string, assignedUsers: User[], assignedProjects: Project[]): void {\n    name = name.trim();\n    description = description.trim();\n    if (!name || !description || !dateString) {\n      return;\n    }\n    const dateParts = dateString.split('/');\n    const date = new Date(parseInt(dateParts[2]), parseInt(dateParts[1]) - 1, parseInt(dateParts[0]));\n    this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n    this.getTasks();\n  }\n\n  deleteTask(task: Task): void {\n    this.taskService.deleteTask(task);\n    this.getTasks();\n  }\n\n  editTask(task: Task): void {\n    this.editedTask = { ...task };\n    this.selectedUsers = this.editedTask.assignedUsers || [];\n  }\n\n  cancelEditing(): void {\n    this.editedTask = undefined;\n    this.selectedUsers = [];\n  }\n\n  updateTask(task: Task, name: string, description: string, date: Date, assignedUsers?: User[], assignedProjects?: Project[]): void {\n    if (!name || !description || !date) {\n      return;\n    }\n    this.taskService.updateTask(task.id, name, description, date, assignedUsers, assignedProjects);\n    this.editedTask = undefined;\n    this.selectedUsers = [];\n    this.getTasks();\n  }\n\n  applyFilter(event: Event): void {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.tasks.filter = filterValue.trim().toLowerCase();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}