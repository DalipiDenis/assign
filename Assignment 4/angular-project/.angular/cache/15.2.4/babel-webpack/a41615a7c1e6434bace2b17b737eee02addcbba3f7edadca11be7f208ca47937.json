{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.nextId = 1;\n    this.tasks = [{\n      id: this.nextId++,\n      name: \"Assignment 3\",\n      description: \"Finish assignment 3\",\n      date: new Date(\"2023-04-20\"),\n      isDone: false,\n      assignedUsers: User = {\n        id: this.nextId++,\n        firstName: 'Denis',\n        lastName: 'Dalipi',\n        username: \"Deda\",\n        email: \"denis.dalipi@unifr.ch\",\n        password: \"1234567890\"\n      }\n    }, {\n      id: this.nextId++,\n      name: \"Grade\",\n      description: \"Get Good grade\",\n      date: new Date(\"2023-04-20\"),\n      isDone: false\n    }];\n  }\n  getTasks() {\n    return this.tasks;\n  }\n  addTask(name, description, date, assignedUsers, assignedProjects) {\n    const task = {\n      id: this.nextId++,\n      name,\n      description,\n      date,\n      isDone: false\n    };\n    if (assignedUsers) {\n      task.assignedUsers = assignedUsers;\n    }\n    if (assignedProjects) {\n      task.assignedProjects = assignedProjects;\n    }\n    this.tasks.push(task);\n  }\n  deleteTask(task) {\n    const index = this.tasks.findIndex(u => u.id === task.id);\n    if (index >= 0) {\n      this.tasks.splice(index, 1);\n    }\n  }\n  getNextId() {\n    return this.nextId;\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)();\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,WAAW;EAHxBC;IAIU,WAAM,GAAG,CAAC;IAElB,UAAK,GAAU,CACb;MAACC,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,IAAI,EAAC,cAAc;MAAEC,WAAW,EAAC,qBAAqB;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;MAAEC,MAAM,EAAE,KAAK;MAAEC,aAAa,EAC1IC,IAAI,GAAE;QAAER,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;QAAEQ,SAAS,EAAE,OAAO;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,QAAQ,EAAE,MAAM;QAAEC,KAAK,EAAE,uBAAuB;QAAEC,QAAQ,EAAE;MAAY;IAAE,CAAC,EAC1I;MAACb,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,IAAI,EAAC,OAAO;MAAEC,WAAW,EAAC,gBAAgB;MAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;MAAEC,MAAM,EAAE;IAAK,CAAC,CAC7G;;EAEDQ,QAAQ;IACN,OAAO,IAAI,CAACC,KAAK;EACnB;EAEAC,OAAO,CAACd,IAAY,EAAEC,WAAmB,EAAEC,IAAU,EAAEG,aAAsB,EAAEU,gBAA4B;IAC3G,MAAMC,IAAI,GAAS;MAAElB,EAAE,EAAE,IAAI,CAACC,MAAM,EAAE;MAAEC,IAAI;MAAEC,WAAW;MAAEC,IAAI;MAAEE,MAAM,EAAE;IAAK,CAAE;IAChF,IAAIC,aAAa,EAAE;MACjBW,IAAI,CAACX,aAAa,GAAGA,aAAa;;IAEpC,IAAIU,gBAAgB,EAAE;MACpBC,IAAI,CAACD,gBAAgB,GAAGA,gBAAgB;;IAE1C,IAAI,CAACF,KAAK,CAACI,IAAI,CAACD,IAAI,CAAC;EACvB;EAEEE,UAAU,CAACF,IAAU;IACjB,MAAMG,KAAK,GAAG,IAAI,CAACN,KAAK,CAACO,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACvB,EAAE,KAAKkB,IAAI,CAAClB,EAAE,CAAC;IACzD,IAAIqB,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACN,KAAK,CAACS,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;;EAEjC;EAEAI,SAAS;IACP,OAAO,IAAI,CAACxB,MAAM;EACpB;;AAjCWH,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["TaskService","constructor","id","nextId","name","description","date","Date","isDone","assignedUsers","User","firstName","lastName","username","email","password","getTasks","tasks","addTask","assignedProjects","task","push","deleteTask","index","findIndex","u","splice","getNextId","factory","providedIn"],"sourceRoot":"","sources":["/Users/denisdalipi/Downloads/angular-project/src/app/task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Task } from './model/task';\nimport { User } from './model/user';\nimport { Project } from './model/project';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private nextId = 1;\n\n  tasks: Task[]= [\n    {id: this.nextId++, name:\"Assignment 3\", description:\"Finish assignment 3\", date: new Date(\"2023-04-20\"), isDone: false, assignedUsers:\nUser ={ id: this.nextId++, firstName: 'Denis', lastName: 'Dalipi', username: \"Deda\", email: \"denis.dalipi@unifr.ch\", password: \"1234567890\" }},\n    {id: this.nextId++, name:\"Grade\", description:\"Get Good grade\", date: new Date(\"2023-04-20\"), isDone: false}\n  ]\n\n  getTasks(): Task[] {\n    return this.tasks;\n  }\n\n  addTask(name: string, description: string, date: Date, assignedUsers?: User[], assignedProjects?: Project[]): void {\n  const task: Task = { id: this.nextId++, name, description, date, isDone: false };\n  if (assignedUsers) {\n    task.assignedUsers = assignedUsers;\n  }\n  if (assignedProjects) {\n    task.assignedProjects = assignedProjects;\n  }\n  this.tasks.push(task);\n}\n\n  deleteTask(task: Task): void {\n      const index = this.tasks.findIndex(u => u.id === task.id);\n      if (index >= 0) {\n        this.tasks.splice(index, 1);\n      }\n  }\n\n  getNextId(): number {\n    return this.nextId;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}