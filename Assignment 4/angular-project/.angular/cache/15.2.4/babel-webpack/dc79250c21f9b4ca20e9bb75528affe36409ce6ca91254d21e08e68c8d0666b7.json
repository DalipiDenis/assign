{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../team.service\";\nimport * as i2 from \"../task.service\";\nimport * as i3 from \"../user.service\";\nimport * as i4 from \"../project.service\";\nexport class TeamComponent {\n  constructor(teamService, taskService, userService, projectService) {\n    this.teamService = teamService;\n    this.taskService = taskService;\n    this.userService = userService;\n    this.projectService = projectService;\n    this.teams = [];\n    this.tasks = [];\n    this.users = [];\n    this.projects = [];\n  }\n  ngOnInit() {\n    this.getTeams();\n    this.getTasks();\n    this.getUsers();\n    this.getProjects();\n  }\n  getTeams() {\n    this.teams = this.teamService.getTeams();\n  }\n  getTasks() {\n    this.tasks = this.taskService.getTasks();\n  }\n  getUsers() {\n    this.users = this.userService.getUsers();\n  }\n  getProjects() {\n    this.projects = this.projectService.getProjects();\n  }\n  addTeam(name, description, user) {\n    name = name.trim();\n    description = description.trim();\n    if (!name || !description) {\n      return;\n    }\n    const dateParts = dateString.split('/');\n    const date = new Date(parseInt(dateParts[2]), parseInt(dateParts[1]) - 1, parseInt(dateParts[0]));\n    this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n    this.getTasks();\n  }\n  deleteTeam(team) {\n    this.teams = this.teams.filter(u => u !== team);\n    this.teamService.deleteTeam(team);\n  }\n}\nTeamComponent.ɵfac = function TeamComponent_Factory(t) {\n  return new (t || TeamComponent)(i0.ɵɵdirectiveInject(i1.TeamService), i0.ɵɵdirectiveInject(i2.TaskService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.ProjectService));\n};\nTeamComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TeamComponent,\n  selectors: [[\"app-team\"]],\n  decls: 2,\n  vars: 0,\n  template: function TeamComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"team works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;AAeA,OAAM,MAAOA,aAAa;EAMtBC,YAAoBC,WAAwB,EAAUC,WAAwB,EAAUC,WAAwB,EAAUC,cAA8B;IAApI,gBAAW,GAAXH,WAAW;IAAuB,gBAAW,GAAXC,WAAW;IAAuB,gBAAW,GAAXC,WAAW;IAAuB,mBAAc,GAAdC,cAAc;IALxI,UAAK,GAAW,EAAE;IAClB,UAAK,GAAW,EAAE;IAClB,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAc,EAAE;EAEmI;EAE3JC,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAH,QAAQ;IACN,IAAI,CAACI,KAAK,GAAG,IAAI,CAACT,WAAW,CAACK,QAAQ,EAAE;EAC1C;EAEAC,QAAQ;IACN,IAAI,CAACI,KAAK,GAAG,IAAI,CAACT,WAAW,CAACK,QAAQ,EAAE;EAC1C;EAEAC,QAAQ;IACN,IAAI,CAACI,KAAK,GAAG,IAAI,CAACT,WAAW,CAACK,QAAQ,EAAE;EAC1C;EAEAC,WAAW;IACT,IAAI,CAACI,QAAQ,GAAG,IAAI,CAACT,cAAc,CAACK,WAAW,EAAE;EACnD;EAEAK,OAAO,CAACC,IAAY,EAAEC,WAAmB,EAAEC,IAAU;IACnDF,IAAI,GAAGA,IAAI,CAACG,IAAI,EAAE;IAClBF,WAAW,GAAGA,WAAW,CAACE,IAAI,EAAE;IAChC,IAAI,CAACH,IAAI,IAAI,CAACC,WAAW,EAAE;MACzB;;IAEF,MAAMG,SAAS,GAAGC,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC;IACvC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACC,QAAQ,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC,EAAEK,QAAQ,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEK,QAAQ,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACjG,IAAI,CAACjB,WAAW,CAACuB,OAAO,CAACV,IAAI,EAAEC,WAAW,EAAEM,IAAI,EAAEI,aAAa,EAAEC,gBAAgB,CAAC;IAClF,IAAI,CAACpB,QAAQ,EAAE;EACjB;EAEAqB,UAAU,CAACC,IAAU;IACnB,IAAI,CAACnB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACoB,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKF,IAAI,CAAC;IAC/C,IAAI,CAAC5B,WAAW,CAAC2B,UAAU,CAACC,IAAI,CAAC;EACnC;;AA9CS9B,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAiC;EAAAC;EAAAC;EAAAC;IAAA;MCf1BC,yBAAG;MAAAA,2BAAW;MAAAA,iBAAI","names":["TeamComponent","constructor","teamService","taskService","userService","projectService","ngOnInit","getTeams","getTasks","getUsers","getProjects","teams","tasks","users","projects","addTeam","name","description","user","trim","dateParts","dateString","split","date","Date","parseInt","addTask","assignedUsers","assignedProjects","deleteTeam","team","filter","u","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/denisdalipi/Downloads/angular-project/src/app/team/team.component.ts","/Users/denisdalipi/Downloads/angular-project/src/app/team/team.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Task } from \"../model/task\";\nimport { TaskService } from '../task.service';\nimport { UserService } from '../user.service';\nimport { User } from '../model/user';\nimport { Project } from '../model/project';\nimport { ProjectService } from '../project.service';\nimport { Team } from '../model/team';\nimport { TeamService } from '../team.service';\n\n@Component({\n  selector: 'app-team',\n  templateUrl: './team.component.html',\n  styleUrls: ['./team.component.css']\n})\nexport class TeamComponent {\n    teams: Team[] = [];\n    tasks: Task[] = [];\n    users: User[] = [];\n    projects: Project[] = [];\n\n    constructor(private teamService: TeamService, private taskService: TaskService, private userService: UserService, private projectService: ProjectService) {}\n\n    ngOnInit() {\n      this.getTeams();\n      this.getTasks();\n      this.getUsers();\n      this.getProjects();\n    }\n\n    getTeams(): void {\n      this.teams = this.teamService.getTeams();\n    }\n\n    getTasks(): void {\n      this.tasks = this.taskService.getTasks();\n    }\n\n    getUsers(): void {\n      this.users = this.userService.getUsers();\n    }\n\n    getProjects(): void {\n      this.projects = this.projectService.getProjects();\n    }\n\n    addTeam(name: string, description: string, user: User): void {\n      name = name.trim();\n      description = description.trim();\n      if (!name || !description) {\n        return;\n      }\n      const dateParts = dateString.split('/');\n      const date = new Date(parseInt(dateParts[2]), parseInt(dateParts[1]) - 1, parseInt(dateParts[0]));\n      this.taskService.addTask(name, description, date, assignedUsers, assignedProjects);\n      this.getTasks();\n    }\n\n    deleteTeam(team: Team): void {\n      this.teams = this.teams.filter(u => u !== team);\n      this.teamService.deleteTeam(team);\n    }\n}\n","<p>team works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}